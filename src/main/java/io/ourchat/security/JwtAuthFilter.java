package io.ourchat.security;

/**
 * üîê √ù nghƒ©a file:
 * ƒê√¢y l√† l·ªõp Filter d√πng ƒë·ªÉ ch·∫∑n c√°c request kh√¥ng c√≥ JWT h·ª£p l·ªá.
 * - M·ªói request ƒë·ªÅu ph·∫£i ƒëi qua ƒë√¢y tr∆∞·ªõc khi v√†o controller.
 * - N·∫øu c√≥ token ‚Üí ki·ªÉm tra h·ª£p l·ªá ‚Üí g·∫Øn th√¥ng tin user v√†o SecurityContextHolder.
 * - N·∫øu kh√¥ng c√≥ ho·∫∑c sai ‚Üí tr·∫£ v·ªÅ l·ªói 401 Unauthorized.
 * ‚úÖ D√πng c√πng v·ªõi Spring Security th√¥ng qua SecurityFilterChain.
 */

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Component // ƒê√°nh d·∫•u class n√†y l√† m·ªôt Spring Bean
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;

    public JwtAuthFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    // ki·∫øn th·ª©c servlet, c·∫ßn ph·∫£i h·ªçc l·∫°i
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {

        String path = request.getServletPath(); // L·∫•y ƒë∆∞·ªùng d·∫´n ƒëang ƒë∆∞·ª£c g·ªçi
        // B·ªè qua filter n·∫øu request l√† login/register
        if (path.startsWith("/api/auth")) {
            filterChain.doFilter(request, response);
            return;
        }

        // L·∫•y Authorization header
        String authHeader = request.getHeader("Authorization");

        // Ki·ªÉm tra xem header c√≥ t·ªìn t·∫°i v√† b·∫Øt ƒë·∫ßu b·∫±ng "Bearer "
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            // l·∫•y token t·ª´ header
            String token = authHeader.substring(7); // B·ªè qua "Bearer "

            // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa token
            if (jwtUtil.isTokenValid(token)) {

                String email = jwtUtil.extractEmail(token); // L·∫•y email t·ª´ token

                // M·ªôt quy·ªÅn c·ª• th·ªÉ (role) m√† user ƒëang c√≥
                List<SimpleGrantedAuthority> authorities = List.of(new SimpleGrantedAuthority("ROLE_USER"));


                //tao ƒë·ªëi t∆∞·ª£ng dai dien xac th·ª±c                                                      principal, credentials, authorities
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(email, null, authorities);
                // G√°n ƒë·ªëi t∆∞·ª£ng v√†o SecurityContextHolder -> ƒë·ªÉ nh·∫≠n ra ai ƒëang g·ª≠i request
                SecurityContextHolder.getContext().setAuthentication(authToken);
//                SC_OK (200): Successful response.
//                SC_BAD_REQUEST (400): Bad request.
//                SC_UNAUTHORIZED (401): Unauthorized access.
//                SC_FORBIDDEN (403): Forbidden access.
//                SC_NOT_FOUND (404): Resource not found.
//                SC_INTERNAL_SERVER_ERROR (500): Internal server err
                filterChain.doFilter(request, response);
                return;
            }else {
                //Token sai ‚Üí ch·∫∑n l·∫°i
                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                response.getWriter().write("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
                return;
            }
        }
        // N·∫øu kh√¥ng c√≥ token ho·∫∑c kh√¥ng h·ª£p l·ªá ‚Üí tr·∫£ v·ªÅ l·ªói 401 Unauthorized
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        response.getWriter().write("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c thi·∫øu token");

    }

}
